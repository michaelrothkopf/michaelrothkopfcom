import Quiz from './Quiz.js';

// Create listeners for all the checkboxes
const initializeCheckboxes = () => {
  // Handle clicks for the checkboxes
  const onCheckboxClick = (e) => {
    // Toggle whether the checkbox is checked
    if (e.target.dataset.checked === 'yes') {
      e.target.dataset.checked = 'no';
    }
    else {
      e.target.dataset.checked = 'yes';
    }
  }

  // For every checkbox with the class .editor-checkbox
  for (const checkbox of document.getElementsByClassName('editor-checkbox')) {
    // Add the event listener
    checkbox.addEventListener('click', onCheckboxClick);
  }
}

initializeCheckboxes();

// The whole editor
const editor = document.getElementById('editor');
const quizEditorContainer = document.getElementById('quiz-editor-container');

// The navigation elements
const questionSelectorContainer = document.getElementById('question-selector-container');
const quizSettingsNavButton = document.getElementById('quiz-settings-nav');
const newQuestionButton = document.getElementById('new-question-button');

// The quiz settings screen
const quizSettingsContainer = document.getElementById('quiz-settings-container');
const quizNameInput = document.getElementById('quiz-name');
const quizSettingsRandomizeQuestions = document.getElementById('quiz-settings-randomize-questions');
const copyQuizData = document.getElementById('copy-quiz-data');
const importQuiz = document.getElementById('import-quiz');
const helpInformationToggle = document.getElementById('help-information-toggle');
const helpInformation = document.getElementById('help-information');

// The question editor screen
const questionEditorContainer = document.getElementById('question-editor-container');
const quizQuestionPrompt = document.getElementById('quiz-question-prompt');
// const questionTypeMultipleChoice = document.getElementById('question-type-multiple-choice');
// // const questionTypeTrueFalse = document.getElementById('question-type-true-false');
const quizQuestionAnswer = document.getElementById('quiz-question-answer');
const questionOptionsTable = document.getElementById('question-options-table');

// Initialize the global editor state
const editorState = {
  quiz: new Quiz(``),
  currentScreen: 'quiz-settings',
  currentQuestion: 0,
  cleanupHandler: () => {},
};

// Sets the quiz to a different quiz
const setQuiz = (quizData) => {
  editorState.quiz = new Quiz(quizData);
  editorState.currentScreen = 'quiz-settings';
  editorState.currentQuestion = 0;
  editorState.cleanupHandler = () => {};

  updateScreen();
}

// Handles importing a quiz
const handleImportQuiz = (e) => {
}

// Sets the current screen and calls update
const setCurrentScreen = (newScreen) => {
  editorState.currentScreen = newScreen;
  updateScreen();
}

// Updates the DOM to match the current screen
const updateScreen = () => {
  // Cleanup the current scene
  editorState.cleanupHandler();

  // If the screen is the quiz settings screen
  if (editorState.currentScreen === 'quiz-settings') {
    // Hide other screens
    questionEditorContainer.classList.add('editor-hidden');

    // Unhide the quiz settings screen
    quizSettingsContainer.classList.remove('editor-hidden');
  }
  // If the screen is the question editor screen
  else if (editorState.currentScreen === 'question-editor') {
    // Hide other screens
    quizSettingsContainer.classList.add('editor-hidden');

    // Unhide the question editor screen
    questionEditorContainer.classList.remove('editor-hidden');

    // If the question doesn't exist
    if (!editorState.quiz.hasQuestion(editorState.currentQuestion)) {
      alert(`[E1101] Unable to load quiz question index ${editorState.currentQuestion}; does not exist.`);
    }

    // Store the current question in a variable for convenience
    const cq = editorState.quiz.questions[editorState.currentQuestion];

    // Populate the input box with the prompt
    quizQuestionPrompt.value = cq.prompt;

    // Handle updates to the prompt box
    const onQuizQuestionPromptInput = (e) => {
      cq.prompt = quizQuestionPrompt.value;
    }
    quizQuestionPrompt.addEventListener('input', onQuizQuestionPromptInput);

    // Handle updates to the answer box
    const onQuizQuestionAnswerInput = (e) => {
      cq.answer = quizQuestionAnswer.value;
    }
    quizQuestionAnswer.addEventListener('input', onQuizQuestionAnswerInput);

    // If the question is multiple choice
    if (cq.type === 'MultipleChoice') {
      // Show the question options table
      questionOptionsTable.classList.remove('editor-hidden');

      // Populate the options
      for (let i = 0; i < cq.distractors.length; i++) {
        // Create a table row
        const row = document.createElement('tr');
        // Create the option text editor
        
      }
    }
    // Otherwise, hide the table
    else {
      questionOptionsTable.classList.add('editor-hidden');
    }
  }
}

updateScreen();